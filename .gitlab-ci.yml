stages:
  - build
  - test
  - report
  - staging
  - deploy
  - dast

image: 'ruby:2.6'

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: DAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

semgrep-sast:
  variables:
    SAST_ANALYZER_IMAGE_TAG: '2.13.3'

.default-cache: &default-cache
  cache:
    key:
      files:
        - Gemfile.lock
        - package.json
    paths:
      - apt-cache/
      - vendor/ruby
      - node_modules/
    policy: pull

.base_db:
  <<: *default-cache
  services:
    - postgres:latest
    - redis:latest
  variables:
    POSTGRES_DB: dgdp_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: '6f5e79b56aca56ecc1cdaa46f126370f'
    REDIS_URL: redis://redis:6379
  before_script:
    - apt-get update -qq && apt-get install -y -qq postgresql postgresql-contrib libpq-dev cmake nodejs
    - ruby -v
    - which ruby
    - gem install bundler --no-document
    - RAILS_ENV=test bundle install -j $(nproc) --path vendor/ruby
    - RAILS_ENV=test bundle exec rake db:create db:schema:load
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
    - yarn install

test:rspec:
  extends: .base_db
  coverage: '/LOC\s\(\d+\.\d+%\)\scovered/'
  stage: test
  allow_failure: false
  script:
    - bundle exec rake lint
    - bundle exec rake
  artifacts:
    paths:
      - 'coverage/'
    name: 'Rails $CI_PIPELINE_ID Coverage Report'
    expire_in: 24 hours
  cache:
    policy: pull-push
  except:
    - tags
    - schedules

test:jest:
  extends: .base_db
  stage: test
  coverage: '/All\sfiles.*?\s+(\d+.\d+)/'
  allow_failure: false
  script:
    - yarn test -u --coverage --collectCoverageFrom=app/javascript/src/**/*.{js,jsx}
      --collectCoverageFrom='!app/javascript/src/components/Map/PointsOfInterestMarker.jsx'
      --collectCoverageFrom='!app/javascript/src/components/LandParcels/LandParcelEditCoordinate.jsx'
      --collectCoverageFrom='!app/javascript/src/components/Map/MapEditor.jsx'
    - bundle exec rake jest_log:get_issue_count[$CI_JOB_ID,$GITLAB_TOKEN]
  artifacts:
    paths:
      - 'coverage/'
    name: 'Jest $CI_PIPELINE_ID Coverage Report'
    expire_in: 24 hours
  except:
    - tags
    - schedules

cypress:
  image: docker:latest
  services:
    - docker:dind
  stage: staging
  before_script:
    - apk --update add nodejs~=12.22 --repository="http://dl-cdn.alpinelinux.org/alpine/v3.12/main/"

    - apk add yarn
    - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
    - yarn install
    - apk add --no-cache docker-compose
  script:
    - sh ./bin/integration_tests.sh 'ci'
  artifacts:
    when: always
    paths:
      - 'tmp/cypress/'
    name: 'Cypress $CI_PIPELINE_ID Visual Report'
    expire_in: 24 hours
  only:
    - master
  except:
    - schedules

eslint:
  extends: .base_db
  stage: test
  allow_failure: false
  script:
    - yarn lint
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
  except:
    - tags
    - schedules

start_prod_push:
  extends: .base_db
  only:
    - schedules
  script:
    - echo "Creating tag..."
    - bundle exec rake deploy:create_tag[$GITLAB_TOKEN]
    - echo "Tag created"

staging:appdeploy:
  stage: staging
  allow_failure: false
  when: on_success
  script:
    - echo 'deploying to STAGING'
    - apt-get update -qy
    - curl https://cli-assets.heroku.com/install.sh | sh
    - gem install dpl
    - gem install faraday -v 1.8.0
    - dpl --provider=heroku --app=double-gdp-staging --api-key=$HEROKU_STAGING_API_KEY
    - echo 'running migration on STAGING'
    - HEROKU_API_KEY=$HEROKU_STAGING_API_KEY heroku run bundle exec rake db:migrate --exit-code --app double-gdp-staging
    - echo 'deployed to STAGING'
  environment:
    name: staging
    url: https://double-gdp-staging.herokuapp.com/
  only:
    - master
  except:
    - schedules

dev:deploy:
  stage: staging
  allow_failure: false
  when: on_success
  script:
    - echo 'deploying to DEV'
    - apt-get update -qy
    - curl https://cli-assets.heroku.com/install.sh | sh
    - gem install dpl
    - gem install faraday -v 1.8.0
    - dpl --provider=heroku --app=double-gdp-dev --api-key=$HEROKU_DEV_API_KEY
    - echo 'running migration on DEV'
    - HEROKU_API_KEY=$HEROKU_DEV_API_KEY heroku run bundle exec rake db:migrate --exit-code --app double-gdp-dev
    - echo 'deployed to DEV'

  environment:
    name: development
    url: https://double-gdp-dev.herokuapp.com/
  only:
    - master
  except:
    - schedules

production:
  stage: deploy
  allow_failure: false
  script:
    - echo 'deploying to PRODUCTION'
    - gem install dpl
    - gem install faraday -v 1.8.0
    - dpl --provider=heroku --app=double-gdp-fe --api-key=$HEROKU_PRODUCTION_API_KEY
    - echo 'deployed to PRODUCTION'
  environment:
    name: production
    url: https://app.doublegdp.com/
  only:
    - tags

# Execute a DAST scan against DEV environment
variables:
  DAST_WEBSITE: https://double-gdp-dev.herokuapp.com/

dast:
  before_script:
    - echo "Execute a DAST scan against DEV environment - $DAST_WEBSITE"

code_quality:
  variables:
    SOURCE_CODE: app/javascript/src/**/*.{js,jsx}
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 24 hours
