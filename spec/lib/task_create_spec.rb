# frozen_string_literal: true

require 'rails_helper'
require 'task_create'

RSpec.describe TaskCreate do
  let!(:user) { create(:user_with_community) }
  data = {
    body: 'New Task',
    category: 'call',
    description: 'New Task Description',
    flagged: true,
    due_date: nil,
  }

  it 'should return a community when user_id is given' do
    community = TaskCreate.community(user.id)
    expect(community).not_to be_nil
    expect(community.id).to eq user.community_id
  end

  it '#new_from_action should not create new task when author_id is blank' do
    data[:user_id] = ''
    data[:author_id] = ''

    TaskCreate.new_from_action(data)
    expect(Notes::Note.count).to eq 0
    expect(Notes::AssigneeNote.count).to eq 0
  end

  it '#new_from_action should not create new task when body is blank' do
    data[:body] = ''
    data[:user_id] = user.id
    data[:author_id] = user.id

    TaskCreate.new_from_action(data)
    expect(Notes::Note.count).to eq 0
    expect(Notes::AssigneeNote.count).to eq 0
  end

  it '#new_from_action should not create task without community' do
    data[:body] = 'New Task'
    data[:user_id] = user.id
    data[:author_id] = '123'

    TaskCreate.new_from_action(data)
    expect(Notes::Note.count).to eq 0
    expect(Notes::AssigneeNote.count).to eq 0
  end

  it '#new_from_action should create a new task' do
    data[:body] = 'New Task'
    data[:user_id] = user.id
    data[:author_id] = user.id

    expect do
      TaskCreate.new_from_action(data)
    end.to change { Notes::Note.count }.by(1)
  end

  it '#new_from_action should assign task to assignees' do
    data[:body] = 'New Task'
    data[:assignees] = user.id.to_s
    data[:user_id] = user.id
    data[:author_id] = user.id

    expect do
      TaskCreate.new_from_action(data)
    end.to change { Notes::Note.count }.by(1)

    expect do
      TaskCreate.new_from_action(data)
    end.to change { Notes::AssigneeNote.count }.by(1)

    assigned_note = user.assignee_notes.map(&:note).select { |n| n[:body] = data[:body] }

    expect(assigned_note[0]).not_to be_nil
    expect(assigned_note[0][:body]).to eq 'New Task'
  end

  context '#new_from_template' do
    data = {
      body: 'Task Triggered from Form',
      category: 'form',
      description: 'Description',
      flagged: true,
      due_date: nil,
    }

    it 'should not create task when community is blank' do
      TaskCreate.new_from_template(data, nil)
      expect(Notes::Note.count).to eq 0
    end
    it 'should not create task when author is blank' do
      data[:author_id] = ''
      TaskCreate.new_from_template(data, user.community)
      expect(Notes::Note.count).to eq 0
    end
    it 'should not create task when body is blank' do
      data[:body] = ''
      TaskCreate.new_from_template(data, user.community)
      expect(Notes::Note.count).to eq 0
    end

    it 'should create a  regular form task without if no task template exists' do
      form_task_params = {
        body: 'Task Triggered from Form',
        category: 'form',
        description: 'Description',
        flagged: true,
        due_date: nil,
        user_id: user.id,
        author_id: user.id,
      }

      TaskCreate.new_from_template(form_task_params, user.community)

      parent_task = user.community.notes.find_by(body: form_task_params[:body])
      expect(parent_task[:author_id]).to eq(user.id)
      expect(parent_task[:category]).to eq('form')
      expect(parent_task[:autogenerated]).to be(true)
      expect(parent_task[:flagged]).to be(true)
      expect(parent_task[:parent_note_id]).to be_nil
    end

    it 'should create autogenerated To-DO tasks from template' do
      template_author = create(:user_with_community, community_id: user.community_id)

      form_task_params = {
        body: 'Task Triggered from Form',
        category: 'form',
        description: 'Description',
        flagged: true,
        due_date: nil,
        user_id: user.id,
        author_id: user.id,
      }

      parent_template_task = template_author.community.notes.create!(
        body: 'Template 1',
        description: 'Template 1 Description',
        category: 'template',
        flagged: true,
        user_id: template_author.id,
        author_id: template_author.id,
        parent_note_id: nil,
      )

      # Create 2 subtasks
      2.times do |i|
        template_author.community.notes.create!(
          body: "Sub Task #{i}",
          description: "Template Sub task Description #{i}",
          category: 'template',
          flagged: true,
          user_id: template_author.id,
          author_id: template_author.id,
          parent_note_id: parent_template_task[:id],
        )
      end

      # Execute action
      TaskCreate.new_from_template(form_task_params, user.community)

      # It creates a Parent task from form submission trigger
      parent_task = user.community.notes.find_by(body: form_task_params[:body])
      expect(parent_task.sub_notes.all.count).to eq 1
      expect(parent_task[:author_id]).to eq(user.id)
      expect(parent_task[:category]).to eq('form')
      expect(parent_task[:autogenerated]).to be(true)
      expect(parent_task[:flagged]).to be(true)
      expect(parent_task[:parent_note_id]).to be_nil

      # It creates a sub task from task template
      sub_task = user.community.notes.find_by(body: 'Template 1')
      expect(sub_task.sub_notes.all.count).to eq 2
      expect(sub_task[:parent_note_id]).to eq(parent_task.id)
      expect(sub_task[:description]).to eq('Template 1 Description')
      expect(sub_task[:category]).to eq('to_do')
      expect(sub_task[:autogenerated]).to be(true)
      expect(sub_task[:flagged]).to be(true)
      expect(sub_task[:author_id]).to eq(template_author.id)

      # It creates a sub sub task from task template
      sub_sub_task = user.community.notes.find_by(body: 'Sub Task 1')
      expect(sub_sub_task[:parent_note_id]).to eq(sub_task.id)
      expect(sub_sub_task[:description]).to eq('Template Sub task Description 1')
      expect(sub_sub_task[:category]).to eq('to_do')
      expect(sub_sub_task[:autogenerated]).to be(true)
      expect(sub_sub_task[:flagged]).to be(true)
      expect(sub_sub_task[:author_id]).to eq(template_author.id)
    end
  end
end
