# frozen_string_literal: true

require 'rails_helper'

RSpec.describe EventLog, type: :model do
  before :each do
    @community = create(:community)
    @user = create(:user, community_id: @community.id)
    @security_guard = create(:security_guard, community_id: @community.id)
  end

  describe 'Callbacks' do
    describe 'after_commit' do
      describe '#execute_action_flows' do
        before { ActiveJob::Base.queue_adapter = :test }
        after { clear_enqueued_jobs }

        context 'when event log reference is created manually' do
          before do
            admin = create(:admin_user, community_id: @community.id)
            create(:note, community_id: @community.id,
                          user_id: @user.id, author_id: admin.id)
          end

          it 'adds action flow job in queue' do
            job = ActiveJob::Base.queue_adapter.enqueued_jobs.find do |info|
              info['job_class'] == 'ActionFlowJob'
            end
            expect(ActiveJob::Base.queue_adapter.enqueued_jobs.count).to eql 2
            expect(job).to be_present
          end
        end
        context 'when event log reference is created automatically' do
          before do
            admin = create(:admin_user, community_id: @community.id)
            create(:note, community_id: @community.id,
                          user_id: @user.id, author_id: admin.id,
                          autogenerated: true)
          end

          it 'does not add action flow job in queue' do
            job = ActiveJob::Base.queue_adapter.enqueued_jobs.find do |info|
              info['job_class'] == 'ActionFlowJob'
            end
            expect(ActiveJob::Base.queue_adapter.enqueued_jobs.count).to eql 1
            expect(job).to be_nil
          end
        end
      end
    end
  end

  it 'should log user login' do
  end

  describe 'user activity logging' do
    it 'should ignore if already logged activity in the past 24 hours' do
      EventLog.create(
        subject: 'user_login',
        acting_user: @user,
        community: @user.community,
        created_at: 16.hours.ago,
      )
      EventLog.log_user_activity_daily(@user)
      expect(EventLog.where(
        acting_user: @user,
        subject: 'user_active',
      ).count).to eql 0
    end

    it 'should only log once every 24 hours' do
      EventLog.log_user_activity_daily(@user)
      EventLog.log_user_activity_daily(@user)
      expect(EventLog.where(
        acting_user: @user,
        subject: 'user_active',
      ).count).to eql 1
    end
  end

  describe '.post_read_by_acting_user' do
    it 'returns post-read logs by a user' do
      user = FactoryBot.create(:user_with_community)
      community = user.community

      log1 = create(:event_log, acting_user: user, community: community, subject: 'post_read')
      log2 = create(:event_log, acting_user: user, community: community, subject: 'user_login')
      log3 = create(:event_log, acting_user: user, community: community, subject: 'post_read')

      results = EventLog.post_read_by_acting_user(user)

      expect(results).to include(log1, log3)
      expect(results).not_to include(log2)
    end
  end

  describe '.post_read_to_sentence' do
    it 'returns a description for post_read event' do
      user = create(:user_with_community)
      community = user.community
      log = create(:event_log, acting_user: user, community: community,
                               subject: 'post_read', data: { post_id: 11 })

      expect(log.post_read_to_sentence).to eq("Post 11 was read by #{user.name}")
    end
  end

  describe '.post_shared_to_sentence' do
    it 'returns a description for post_shared event' do
      user = create(:user_with_community)
      community = user.community
      log = create(:event_log, acting_user: user, community: community,
                               subject: 'post_shared', data: { post_id: 11 })

      expect(log.post_shared_to_sentence).to eq("Post 11 was shared by #{user.name}")
    end
  end
end
