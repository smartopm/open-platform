# frozen_string_literal: true

require 'rails_helper'

RSpec.describe Mutations::Invoice::AutogenerateInvoice do
  describe 'create for invoice' do
    let!(:user) { create(:user_with_community) }
    let!(:admin) { create(:admin_user, community_id: user.community_id) }
    let!(:land_parcel) { create(:land_parcel, community_id: user.community_id) }
    let!(:valuation) { create(:valuation, land_parcel_id: land_parcel.id) }
    let!(:payment_plan) { create(:payment_plan, land_parcel_id: land_parcel.id, user_id: user.id) }

    let(:query) do
      <<~GQL
        mutation autogenerateInvoice {
          autogenerateInvoice {
            invoices {
              id
              autogenerated
            }
          }
        }
      GQL
    end

    it 'creates invoices based on payment plans' do
      result = DoubleGdpSchema.execute(query, variables: {},
                                              context: {
                                                current_user: admin,
                                                site_community: user.community,
                                              }).as_json
      expect(result.dig('data', 'autogenerateInvoice', 'invoices', 0, 'id')).not_to be_nil
      expect(
        result.dig('data', 'autogenerateInvoice', 'invoices', 0, 'autogenerated'),
      ).to be_truthy
      expect(result.dig('data', 'autogenerateInvoice', 'invoices').count).to eql 1
      expect(result['errors']).to be_nil
    end
  end
end
