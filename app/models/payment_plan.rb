# frozen_string_literal: true

# PaymentPlan
class PaymentPlan < ApplicationRecord
  belongs_to :user
  belongs_to :land_parcel
  has_many :invoices, dependent: :nullify
  has_many :wallet_transactions, dependent: :nullify

  after_create :generate_monthly_invoices

  enum status: { active: 0, cancelled: 1, deleted: 2 }

  def update_plot_balance(amount, type = 'credit')
    return if amount.zero?

    type.eql?('credit') ? update(plot_balance: plot_balance + amount) : debit_plot_balance(amount)
  end

  def debit_plot_balance(amount)
    if amount > plot_balance
      update(plot_balance: 0, pending_balance: pending_balance + amount - plot_balance)
    else
      update(plot_balance: plot_balance - amount)
    end
  end

  private

  def generate_monthly_invoices
    return if monthly_amount.nil? || monthly_amount.zero?

    no_of_invoices = duration_in_month || 12
    no_of_invoices.times { |index| create_invoice_for_month(monthly_amount, start_date + index.month) }
  end

  def create_invoice_for_month(amount, date)
    invoices.create!({
                       land_parcel: land_parcel,
                       amount: amount,
                       community: user.community,
                       autogenerated: true,
                       status: 'in_progress',
                       due_date: date + 1.year,
                       user: user,
                     })
  end
end
