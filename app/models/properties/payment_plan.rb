# frozen_string_literal: true

module Properties
  # PaymentPlan
  class PaymentPlan < ApplicationRecord
    belongs_to :user, class_name: 'Users::User'
    belongs_to :land_parcel
    has_many :invoices, class_name: 'Payments::Invoice', dependent: :nullify
    has_many :wallet_transactions, class_name: 'Payments::WalletTransaction', dependent: :nullify

    after_create :generate_monthly_invoices

    validates :payment_day,
              numericality: { only_integer: true, greater_than: 0, less_than_or_equal_to: 28 }

    enum status: { active: 0, cancelled: 1, deleted: 2 }

    def update_plot_balance(amount, type = 'credit')
      return if amount.zero?

      type.eql?('credit') ? update(plot_balance: plot_balance + amount) : debit_plot_balance(amount)
    end

    def debit_plot_balance(amount)
      if amount > plot_balance
        update(plot_balance: 0, pending_balance: pending_balance + amount - plot_balance)
      else
        update(plot_balance: plot_balance - amount)
      end
    end

    private

    def generate_monthly_invoices
      return if monthly_amount.nil? || monthly_amount.zero?

      no_of_invoices = duration_in_month || 12
      no_of_invoices.times do |index|
        create_invoice_for_month(monthly_amount, start_date + index.month)
      end
    end

    def create_invoice_for_month(amount, date)
      invoices.create!({
                         land_parcel: land_parcel,
                         amount: amount,
                         community: user.community,
                         autogenerated: true,
                         status: 'in_progress',
                         due_date: date + 1.month,
                         user: user,
                       })
    end
  end
end
