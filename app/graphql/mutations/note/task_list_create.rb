# frozen_string_literal: true

module Mutations
  module Note
    class TaskListCreate < BaseMutation
      argument :body, String, required: true

      field :note, Types::NoteType, null: true

      def resolve(vals)
        note_list = context[:site_community].note_lists
        .create!(
          name: vals[:body]
        )

        parent_task_params = {
          body: note_list.name,
          note_list_id: note_list.id,
          category: 'task_list',
          parent_note_id: nil,
          autogenerated: true,
          flagged: true,
          completed: false,
          user_id: context[:current_user].id,
          author_id: context[:current_user].id,
        }
  
        parent_task = context[:site_community].notes.create!(parent_task_params)
        # raise GraphQL::ExecutionError, note.errors.full_messages unless note.persisted?

        { note: parent_task }
      end

      def authorized?(_vals)
        return true if permitted?(module: :note, permission: :can_create_note)

        raise GraphQL::ExecutionError, I18n.t('errors.unauthorized')
      end
    end
  end
end
