# frozen_string_literal: true

module Mutations
  module Note
    # Create a new task list
    class TaskListCreate < BaseMutation
      argument :body, String, required: true

      field :note, Types::NoteType, null: true

      def resolve(vals)
        note_list = context[:site_community].note_lists
                                            .create(
                                              name: vals[:body],
                                            )
        raise GraphQL::ExecutionError, note_list.errors.full_messages unless note_list.persisted?

        parent_task = build_parent_task(note_list)

        raise GraphQL::ExecutionError, note.errors.full_messages unless parent_task.persisted?

        { note: parent_task }
      end

      def build_parent_task(note_list)
        parent_task_params = {
          body: note_list.name, note_list_id: note_list.id,
          category: 'task_list', parent_note_id: nil,
          autogenerated: true, flagged: true,
          completed: false, user_id: context[:current_user].id,
          author_id: context[:current_user].id
        }
        context[:site_community].notes.create(parent_task_params)
      end

      def authorized?(_vals)
        return true if permitted?(module: :note, permission: :can_create_task_lists)

        raise GraphQL::ExecutionError, I18n.t('errors.unauthorized')
      end
    end
  end
end
